resources:
  repositories:
    - repository: vvp-pipeline-scripts
      type: github
      name: qinjunjerry/vvp-pipeline-scripts
      endpoint: 'vvp-pipeline-scripts-service-connection'

trigger:
- master

variables:

  # Azure Resource Manager service connection 
  azureSubscription: 'vvp-pipeline-service-connection'

  # Agent VM image name
  # Except the depoly stage which uses a Windows image as it is required by AzureFileCopy@3 task
  vmImageName: 'ubuntu-latest'

  # DEBUG
  system.debug: true

  # Azure resources
  resourceGroup: 'vvp-pipeline-demo'
  servicePrincipal: 'http://vvp-pipeline-service-principal'
  keyVault: 'vvp-pipeline-keyvault'
  storageAccount: 'vvppipelinestorage'
  blobContainer: 'vvp-pipeline-container'

  # Kubernetes
  kubernetesCluster: 'vvp-pipeline-cluster'
  kubernetesNamespace: 'vvp'

  # Ververica Platform
  vvpNamespace: 'default'
  vvpDeploymentTarget: '6232cc84-7aa3-4524-b3a8-36cab7203c47'

  # misc.
  delayMinutes: 1

stages:

# Build stage
- stage: Build
  displayName: Build stage
  jobs:
  - job: PackageAndPublish
    displayName: Package and publish

    pool:
      vmImage: $(vmImageName)

    steps:

    - task: Maven@3
      displayName: Maven package
      inputs:
        mavenPomFile: 'pom.xml'

    - task: CopyFiles@2
      displayName: Stage artifacts
      inputs:
        SourceFolder: 'target'
        Contents: |
          *.jar
          !original-*.jar
        TargetFolder: '$(build.artifactstagingdirectory)/artifacts'

    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/artifacts'
        artifactName: JobJar

# Deploy stage
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
    - job: DownloadAndDeploy
      displayName: Download and deploy

      # We use a windows image here because AzureFileCopy@3 runs only on Windows
      pool:
        vmImage: 'windows-latest'

      steps:

      - checkout: none

      - task: DownloadPipelineArtifact@2
        displayName: Download artifacts
        inputs:
          artifact: 'JobJar'
          downloadPath: '$(build.artifactstagingdirectory)/artifacts' 

      - task: AzureFileCopy@3
        displayName: Deploy to blob storage
        inputs:
          sourcePath: '$(build.artifactstagingdirectory)/artifacts' 
          azureSubscription: '$(azureSubscription)'
          destination: 'AzureBlob'
          storage: '$(storageAccount)'
          containerName: '$(blobContainer)'
          BlobPrefix: 'artifacts/namespaces/$(vvpNamespace)'

# Submit stage
- stage: Submit
  displayName: Submit stage
  dependsOn: Deploy
  condition: succeeded()

  jobs:
    - job: SubmitFlinkJob
      displayName: Submit flink job

      pool:
        vmImage: $(vmImageName)

      steps:

        - checkout: self
          displayName: Checkout self

        - checkout: vvp-pipeline-scripts
          displayName: Checkout scripts

        - task: KubectlInstaller@0
          displayName: Install kubectl
          inputs: 
            kubectlVersion: 1.15.0

        - task: AzureKeyVault@1
          displayName: Get secrets
          inputs:
            azureSubscription: '$(azureSubscription)'
            KeyVaultName: '$(keyVault)'
            SecretsFilter: 'servicePrincipalKey,vvpAPIToken,tenantId'

        - task: Bash@3
          inputs:
            filePath: '../vvp-pipeline-scripts/setup-local-vvp-access.sh'
          env:
            servicePrincipal: $(servicePrincipal)
            servicePrincipalKey: $(servicePrincipalKey)
            tenantId: $(tenantId)
            resourceGroup: $(resourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            kubernetesNamespace: $(kubernetesNamespace)
          displayName: Setup local access

        - task: Bash@3
          inputs:
            # this sets the 'deploymentId' variable
            filePath: '../vvp-pipeline-scripts/search-deployment-id.sh'
          env:
            vvpNamespace: $(vvpNamespace)
            vvpAPIToken: $(vvpAPIToken)
            artifactId: $(artifactId)
          displayName: Check deployment

        - task: Bash@3
          inputs:
            filePath: '../vvp-pipeline-scripts/update-existing-deployment.sh'
          env:
            deploymentId: $(deploymentId)
            vvpNamespace: $(vvpNamespace)
            vvpAPIToken: $(vvpAPIToken)
            jarFileName: $(jarFileName)
            blobContainer: $(blobContainer)
            storageAccount: $(storageAccount)
            buildVersion: $(Build.SourceVersion)
          condition: and(succeeded(), ne(variables['deploymentId'], '') )
          displayName: PATCH deployment

        - task: Bash@3
          inputs:
            filePath: '../vvp-pipeline-scripts/create-new-deployment.sh'
          env:
            vvpNamespace: $(vvpNamespace)
            vvpAPIToken: $(vvpAPIToken)
            vvpDeploymentTarget: $(vvpDeploymentTarget)
            artifactId: $(artifactId)
            jarFileName: $(jarFileName)
            blobContainer: $(blobContainer)
            storageAccount: $(storageAccount)
            buildVersion: $(Build.SourceVersion)
          condition: and(succeeded(), eq(variables['deploymentId'], '') )
          displayName: POST deployment

# Monitor stage
- stage: Monitor
  displayName: Monitor stage
  dependsOn: Submit
  condition: succeeded()

  jobs:
    - job: Delay
      displayName: Delay a few minutes

      pool: server
 
      steps:
        - task: Delay@1  # requires 'pool: server'
          inputs:
            delayForMinutes: '$(delayMinutes)'

    - job: MonitorFlinkJob
      dependsOn: Delay

      pool:
        vmImage: $(vmImageName)

      steps:

        - checkout: self
          displayName: Checkout self

        - checkout: vvp-pipeline-scripts
          displayName: Checkout scripts

        - task: KubectlInstaller@0
          displayName: Install kubectl
          inputs: 
            kubectlVersion: 1.15.0

        - task: AzureKeyVault@1
          displayName: Get secrets
          inputs:
            azureSubscription: '$(azureSubscription)'
            KeyVaultName: '$(keyVault)'
            SecretsFilter: 'servicePrincipalKey,vvpAPIToken,tenantId'

        - task: Bash@3
          inputs:
            filePath: '../vvp-pipeline-scripts/setup-local-vvp-access.sh'
          env:
            servicePrincipal: $(servicePrincipal)
            servicePrincipalKey: $(servicePrincipalKey)
            tenantId: $(tenantId)
            resourceGroup: $(resourceGroup)
            kubernetesCluster: $(kubernetesCluster)
            kubernetesNamespace: $(kubernetesNamespace)
          displayName: Setup local access

        - task: Bash@3
          inputs:
            filePath: '../vvp-pipeline-scripts/check-deployment-state.sh'
          env:
            vvpAPIToken: $(vvpAPIToken)
            artifactId: $(artifactId)
          displayName: Check job state
