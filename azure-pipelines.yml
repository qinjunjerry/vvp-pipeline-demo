trigger:
- master

variables:

  # Azure Resource Manager service connection 
  azureSubscription: 'vvp-pipeline-service-connection'

  # Agent VM image name: Windows is needed by AzureFileCopy@3
  vmImageName: 'windows-latest'

  # DEBUG
  system.debug: true

  # Ververica Platform related settings
  vvpNamespace: 'default'
  vvpDeploymentTarget: '6ebbe4f9-0377-462a-9112-81a2ef4ea0b5'
  servicePrincipal: 'http://vvp-pipeline-demo-service-principal'
  tenantId: '2925ee25-3bd0-402a-88f1-69307e6a39f3'
  keyVault: 'vvp-pipeline-keyvault'
  vvpResourceGroup: 'vvp-pipeline-demo'
  vvpClusterName: 'vvp-pipeline-cluster'
  vvpKubernetesNamespace: 'vvp'
  vvpJobJar: 'wiki-edits-0.1.jar'
  vvpPipelineDemoStorage: 'vvppipelinestorage'
  vvpPipelineDemoBlobContainer: 'vvp-pipeline-artifacts'
  vvpDeploymentName: 'vvp-pipeline-demo-deployment'


stages:

# ### Build stage
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: PackageAndPublish
#     displayName: Package and publish

#     pool:
#       vmImage: $(vmImageName)

#     steps:
#     - task: Maven@3
#       displayName: Maven package
#       inputs:
#         mavenPomFile: 'pom.xml'

#     - task: CopyFiles@2
#       displayName: Stage job jar
#       inputs:
#         SourceFolder: 'target'
#         Contents: '$(vvpJobJar)'
#         TargetFolder: '$(build.artifactstagingdirectory)'

#     - task: PublishPipelineArtifact@1
#       displayName: Publish artifacts
#       inputs:
#         targetPath: '$(build.artifactstagingdirectory)'
#         artifactName: JobJar

# ### Deploy stage
# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#     - job: DownloadAndDeploy
#       displayName: Download and deploy
#       pool:
#         vmImage: $(vmImageName)
#       steps:
#       - task: DownloadPipelineArtifact@2
#         displayName: Download artifacts
#         inputs:
#           artifact: 'JobJar'
#           downloadPath: '$(build.artifactstagingdirectory)' 

#       - task: AzureFileCopy@3
#         displayName: Deploy to blob storage
#         inputs:
#           sourcePath: '$(build.artifactstagingdirectory)' 
#           azureSubscription: '$(azureSubscription)'
#           destination: azureBlob
#           storage: vvppipelinestorage
#           containerName: vvp-pipeline-artifacts
#           BlobPrefix: 'artifacts/namespaces/$(vvpNamespace)'

- stage: Submit
  displayName: Submit stage
  jobs:
    - job: SubmitFlinkJob
      displayName: Submit flink job
      steps:
        - task: KubectlInstaller@0
          displayName: Install kubectl
          inputs: 
            kubectlVersion: 1.15.0

        - task: AzureKeyVault@1
          inputs:
            azureSubscription: '$(azureSubscription)'
            KeyVaultName: '$(keyVault)'
            SecretsFilter: 'vvp-pipeline-demo-service-principal-password'

        - script: az login --service-principal -u $(servicePrincipal) -p $(vvp-pipeline-demo-service-principal-password)  --tenant $(tenantId)
        - script: az aks get-credentials --resource-group $(vvpResourceGroup) --name $(vvpClusterName)
        - script: kubectl port-forward service/vvp-ververica-platform 8080:80 --namespace $(vvpKubernetesNamespace) &
        - bash: |
            abc=True
            echo "##vso[task.setvariable variable=sauce]${abc}"
        - bash: |
            echo my pipeline variable is $(sauce)
        - script: |
            found=`curl -X GET "http://localhost:8080/api/v1/namespaces/default/deployments" -H "accept: application/json" -s | python -c 'import sys, json; j=json.loads(sys.stdin.read()); print vvp-pipeline-demo-deployment in [ i["metadata"]["name"] for i in j["items"] ]'`
            echo "##vso[task.setvariable variable=exists]$found"
        - script: |
            echo $(exists)
        # - script: |
        #     curl -X POST "http://localhost:8080/api/v1/namespaces/default/deployments" -H "accept: application/yaml" -H "Content-Type: application/yaml" -d "
        #     kind: Deployment
        #     apiVersion: v1
        #     metadata:
        #       name: vvp-pipeline-demo-deployment
        #       namespace: default
        #     spec:
        #       state: RUNNING
        #       upgradeStrategy:
        #         kind: STATELESS
        #       restoreStrategy:
        #         kind: LATEST_SAVEPOINT
        #         allowNonRestoredState: false
        #       deploymentTargetId: $(vvpDeploymentTarget)
        #       template:
        #         metadata:
        #           annotations: {}
        #         spec:
        #           artifact:
        #             kind: JAR
        #             jarUri: >-
        #               wasbs://$(vvpPipelineDemoBlobContainer)@$(vvpPipelineDemoStorage).blob.core.windows.net/artifacts/namespaces/$(vvpNamespace)/$(vvpJobJar)
        #             flinkVersion: 1.9
        #             flinkImageRegistry: registry.platform.data-artisans.net/v2.0
        #             flinkImageRepository: flink
        #             flinkImageTag: 1.9.1-stream1-scala_2.12
        #           parallelism: 1
        #           resources:
        #             jobmanager:
        #               cpu: 1
        #               memory: 1G
        #             taskmanager:
        #               cpu: 1
        #               memory: 2G
        #           flinkConfiguration: {}
        #           logging:
        #             log4jLoggers: {}
        #     status:
        #       state: CANCELLED
        #     "
        #   name: postDeployment
        #   displayName: POST deployment
